" encodeing
set encoding=utf-8
set fenc=utf-8
set fileencodings=ucs-boms,utf-8,euc-jp,cp932
scriptencoding utf-8 

" use 4 spaces for tabs
set tabstop=4 softtabstop=4 shiftwidth=4

" display indentation guides
set list listchars=tab:¤-,trail:·,extends:»,precedes:«,nbsp:×

" View
syntax on
set showcmd
set title
set ruler
set number
set cursorline
set showmatch
set wrap
set t_Co=256
set colorcolumn=80
set mouse=a

" The color theme
" set background=dark

" colorscheme monokai
" colorscheme srcery
" colorscheme hacked_ayu
" colorscheme happy_hacking
" colorscheme idle 
" colorscheme buddy 
" colorscheme idle 

" THE DEFUALT COLOR SCHEME 
" colorscheme maui

" EXTRA COLORS GOT FROM https://github.com/rafi/awesome-vim-colorschemes
" colorscheme 256_noir
" colorschem abstract
" colorschem afterglow
" colorschem alduin
" colorschem anderson
" colorschem angr
" colorschem apprentice
" colorschem atom
" colorschem buddy
" colorschem deep-space
" colorschem dracula
" colorschem flatcolor
" colorschem flattened_dark
" colorschem flattened_light
" colorschem focuspoint
" colorschem github
" colorschem gotham256
" colorschem gotham
 colorschem gruvbox
" colorschem hacked_ayu
" colorschem happy_hacking
" colorschem hybrid_material
" colorschem hybrid_reverse
" colorschem hybrid
" colorschem idle
" colorschem jellybeans
" colorschem lightning
" colorschem lucid
" colorschem lucius
" colorschem materialbox
" colorschem maui
" colorschem meta5
" colorschem minimalist
" colorschem molokai
" colorschem molokayo
" colorschem monokai
" colorschem OceanicNextLight
" colorschem OceanicNext
" colorschem onedark
" colorschem one
" colorschem orbital
" colorschem PaperColor
" colorschem paramount
" colorschem parsec
" colorschem pyte
" colorschem rakr
" colorschem rdark-terminal2
" colorschem scheakur
" colorschem seoul256-light
" colorschem seoul256
" colorschem sierra
" colorschem solarized8_dark_flat
" colorschem solarized8_dark_high
" colorschem solarized8_dark_low
" colorschem solarized8_dark
" colorschem solarized8_light_flat
" colorschem solarized8_light_high
" colorschem solarized8_light_low
" colorschem solarized8_light
" colorschem space-dark
" colorschem srcery
" colorschem tender
" colorschem termschool
" colorschem twilight256
" colorschem two-firewatch
" colorschem wombat256mod


" indent
set smartindent
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=2
set autoindent
set smartindent
set backspace=indent,eol,start

" search
set incsearch
set ignorecase
set smartcase
set hlsearch
set wrapscan

" Vim Plug
""Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" Relative or absolute number lines
function! NumberToggle()
	if(&nu == 1)
		set nu!
		set rnu
	else
		set nornu
		set nu
	endif
endfunction

nnoremap <C-n> :call NumberToggle()<CR>

" If fzf is not installed then delete the below line.
set rtp+=~/.fzf


func! Set_column_at_cursor()
	let &cc=virtcol(".")
endf

nnoremap <C-f> :call Set_column_at_cursor() <CR>
map <C-d> :set cc=80 <CR>
map <C-s> :set cursorline! <CR>


" Split windo to right by default
set splitright

" Key map for navigating between split screens
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Key map for navigating between tabs
nnoremap <C-S-Left> :tabprevious<CR>
nnoremap <C-S-Right> :tabnext<CR>

" Disable Arrow keys in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in Insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>


"Disable Page Up and Down

map <PageUp> <nop>
map <PageDown> <nop>
imap <PageUp> <nop>
imap <PageDown> <nop>

"Disable Delete and Backspace
:inoremap <BS> <Nop>
:inoremap <Del> <Nop>

"Press Ctrl-w to change modes
:imap <C-W> <Esc>

"Opens a visual explorer
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25

"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END

"Togle Vexplore by Ctrl-E
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
map <silent> <C-E> :call ToggleVExplorer()<CR>
